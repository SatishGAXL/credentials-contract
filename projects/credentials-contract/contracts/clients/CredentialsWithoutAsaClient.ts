/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "uploadCertificate(string,string,string,string,string,string,string,string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeOwner(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "index": {
          "type": "uint64",
          "key": "index"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "CredentialsWithoutAsa",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "uploadCertificate",
        "args": [
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "ipfs_hash",
            "type": "string"
          },
          {
            "name": "studentEmail",
            "type": "string"
          },
          {
            "name": "studentName",
            "type": "string"
          },
          {
            "name": "instituteName",
            "type": "string"
          },
          {
            "name": "eventName",
            "type": "string"
          },
          {
            "name": "courseTitle",
            "type": "string"
          },
          {
            "name": "courseStartDate",
            "type": "string"
          },
          {
            "name": "courseEndDate",
            "type": "string"
          }
        ],
        "returns": {
          "type": "uint64"
        },
        "events": [
          {
            "name": "NewCertificate",
            "args": [
              {
                "name": "index",
                "type": "uint64"
              },
              {
                "name": "certificate",
                "type": "(address,address,string,string,string,string,string,string,string,string,string)"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getCertificate",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(address,address,string,string,string,string,string,string,string,string,string)"
        }
      },
      {
        "name": "changeOwner",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "ChangedCertificate",
            "args": [
              {
                "name": "index",
                "type": "uint64"
              },
              {
                "name": "certificate",
                "type": "(address,address,string,string,string,string,string,string,string,string,string)"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "changeMetadata",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "ipfs_hash",
            "type": "string"
          },
          {
            "name": "studentEmail",
            "type": "string"
          },
          {
            "name": "studentName",
            "type": "string"
          },
          {
            "name": "instituteName",
            "type": "string"
          },
          {
            "name": "eventName",
            "type": "string"
          },
          {
            "name": "courseTitle",
            "type": "string"
          },
          {
            "name": "courseStartDate",
            "type": "string"
          },
          {
            "name": "courseEndDate",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "NewCertificate",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "certificate",
            "type": "(address,address,string,string,string,string,string,string,string,string,string)"
          }
        ],
        "desc": ""
      },
      {
        "name": "ChangedCertificate",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "certificate",
            "type": "(address,address,string,string,string,string,string,string,string,string,string)"
          }
        ],
        "desc": ""
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the CredentialsWithoutAsa smart contract.
 */
export type CredentialsWithoutAsa = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'uploadCertificate(string,string,string,string,string,string,string,string,string)uint64' | 'uploadCertificate', {
      argsObj: {
        url: string
        ipfs_hash: string
        studentEmail: string
        studentName: string
        instituteName: string
        eventName: string
        courseTitle: string
        courseStartDate: string
        courseEndDate: string
      }
      argsTuple: [url: string, ipfs_hash: string, studentEmail: string, studentName: string, instituteName: string, eventName: string, courseTitle: string, courseStartDate: string, courseEndDate: string]
      returns: bigint
    }>
    & Record<'getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string)' | 'getCertificate', {
      argsObj: {
        index: bigint | number
      }
      argsTuple: [index: bigint | number]
      returns: [string, string, string, string, string, string, string, string, string, string, string]
    }>
    & Record<'changeOwner(uint64,address)void' | 'changeOwner', {
      argsObj: {
        index: bigint | number
        newOwner: string
      }
      argsTuple: [index: bigint | number, newOwner: string]
      returns: void
    }>
    & Record<'changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void' | 'changeMetadata', {
      argsObj: {
        index: bigint | number
        url: string
        ipfs_hash: string
        studentEmail: string
        studentName: string
        instituteName: string
        eventName: string
        courseTitle: string
        courseStartDate: string
        courseEndDate: string
      }
      argsTuple: [index: bigint | number, url: string, ipfs_hash: string, studentEmail: string, studentName: string, instituteName: string, eventName: string, courseTitle: string, courseStartDate: string, courseEndDate: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'index'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CredentialsWithoutAsaSig = keyof CredentialsWithoutAsa['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CredentialsWithoutAsaSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CredentialsWithoutAsa smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CredentialsWithoutAsaSig> = CredentialsWithoutAsa['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CredentialsWithoutAsa smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CredentialsWithoutAsaSig> = CredentialsWithoutAsa['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CredentialsWithoutAsaCreateCalls = (typeof CredentialsWithoutAsaCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CredentialsWithoutAsaCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CredentialsWithoutAsaDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CredentialsWithoutAsaCreateCalls) => CredentialsWithoutAsaCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CredentialsWithoutAsaCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CredentialsWithoutAsa smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the uploadCertificate(string,string,string,string,string,string,string,string,string)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static uploadCertificate(args: MethodArgs<'uploadCertificate(string,string,string,string,string,string,string,string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'uploadCertificate(string,string,string,string,string,string,string,string,string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.url, args.ipfs_hash, args.studentEmail, args.studentName, args.instituteName, args.eventName, args.courseTitle, args.courseStartDate, args.courseEndDate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getCertificate(args: MethodArgs<'getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string)' as const,
      methodArgs: Array.isArray(args) ? args : [args.index],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeOwner(uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeOwner(args: MethodArgs<'changeOwner(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'changeOwner(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.index, args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeMetadata(args: MethodArgs<'changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.index, args.url, args.ipfs_hash, args.studentEmail, args.studentName, args.instituteName, args.eventName, args.courseTitle, args.courseStartDate, args.courseEndDate],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CredentialsWithoutAsa smart contract
 */
export class CredentialsWithoutAsaClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CredentialsWithoutAsaClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CredentialsWithoutAsa['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CredentialsWithoutAsa smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CredentialsWithoutAsaDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CredentialsWithoutAsaCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CredentialsWithoutAsa smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(CredentialsWithoutAsaCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CredentialsWithoutAsa smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the uploadCertificate(string,string,string,string,string,string,string,string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public uploadCertificate(args: MethodArgs<'uploadCertificate(string,string,string,string,string,string,string,string,string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CredentialsWithoutAsaCallFactory.uploadCertificate(args, params))
  }

  /**
   * Calls the getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getCertificate(args: MethodArgs<'getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CredentialsWithoutAsaCallFactory.getCertificate(args, params))
  }

  /**
   * Calls the changeOwner(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeOwner(args: MethodArgs<'changeOwner(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CredentialsWithoutAsaCallFactory.changeOwner(args, params))
  }

  /**
   * Calls the changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeMetadata(args: MethodArgs<'changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CredentialsWithoutAsaCallFactory.changeMetadata(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CredentialsWithoutAsa['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get index() {
        return CredentialsWithoutAsaClient.getIntegerState(state, 'index')
      },
    }
  }

  public compose(): CredentialsWithoutAsaComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      uploadCertificate(args: MethodArgs<'uploadCertificate(string,string,string,string,string,string,string,string,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.uploadCertificate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getCertificate(args: MethodArgs<'getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getCertificate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeOwner(args: MethodArgs<'changeOwner(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeOwner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeMetadata(args: MethodArgs<'changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeMetadata(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CredentialsWithoutAsaComposer
  }
}
export type CredentialsWithoutAsaComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the uploadCertificate(string,string,string,string,string,string,string,string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  uploadCertificate(args: MethodArgs<'uploadCertificate(string,string,string,string,string,string,string,string,string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsWithoutAsaComposer<[...TReturns, MethodReturn<'uploadCertificate(string,string,string,string,string,string,string,string,string)uint64'>]>

  /**
   * Calls the getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCertificate(args: MethodArgs<'getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsWithoutAsaComposer<[...TReturns, MethodReturn<'getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string)'>]>

  /**
   * Calls the changeOwner(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeOwner(args: MethodArgs<'changeOwner(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsWithoutAsaComposer<[...TReturns, MethodReturn<'changeOwner(uint64,address)void'>]>

  /**
   * Calls the changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeMetadata(args: MethodArgs<'changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsWithoutAsaComposer<[...TReturns, MethodReturn<'changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the CredentialsWithoutAsa smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsWithoutAsaComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CredentialsWithoutAsaComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CredentialsWithoutAsaComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CredentialsWithoutAsaComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CredentialsWithoutAsaComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CredentialsWithoutAsaComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
