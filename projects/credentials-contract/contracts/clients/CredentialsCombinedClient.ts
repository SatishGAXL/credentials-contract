/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "uploadCertificate(string,string,string,string,string,string,string,string,string,bool,uint64,bool)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCertificate(uint64)(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeOwner(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeMetadata(uint64,bool,string,string,string,string,string,string,string,string,string,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimCertificate(uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "clawbackCertificate(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "index": {
          "type": "uint64",
          "key": "index"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "CredentialsCombined",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "uploadCertificate",
        "args": [
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "ipfs_hash",
            "type": "string"
          },
          {
            "name": "studentEmail",
            "type": "string"
          },
          {
            "name": "studentName",
            "type": "string"
          },
          {
            "name": "instituteName",
            "type": "string"
          },
          {
            "name": "eventName",
            "type": "string"
          },
          {
            "name": "courseTitle",
            "type": "string"
          },
          {
            "name": "courseStartDate",
            "type": "string"
          },
          {
            "name": "courseEndDate",
            "type": "string"
          },
          {
            "name": "hasClawback",
            "type": "bool"
          },
          {
            "name": "assetId",
            "type": "uint64"
          },
          {
            "name": "isGDPRcompliant",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "uint64"
        },
        "events": [
          {
            "name": "NewCertificate",
            "args": [
              {
                "name": "index",
                "type": "uint64"
              },
              {
                "name": "certificate",
                "type": "(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "getCertificate",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)"
        }
      },
      {
        "name": "changeOwner",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "ChangedCertificate",
            "args": [
              {
                "name": "index",
                "type": "uint64"
              },
              {
                "name": "certificate",
                "type": "(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "changeMetadata",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "hasClawback",
            "type": "bool"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "ipfs_hash",
            "type": "string"
          },
          {
            "name": "studentEmail",
            "type": "string"
          },
          {
            "name": "studentName",
            "type": "string"
          },
          {
            "name": "instituteName",
            "type": "string"
          },
          {
            "name": "eventName",
            "type": "string"
          },
          {
            "name": "courseTitle",
            "type": "string"
          },
          {
            "name": "courseStartDate",
            "type": "string"
          },
          {
            "name": "courseEndDate",
            "type": "string"
          },
          {
            "name": "isGDPRcompliant",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "ChangedCertificate",
            "args": [
              {
                "name": "index",
                "type": "uint64"
              },
              {
                "name": "certificate",
                "type": "(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "claimCertificate",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "verifyTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "CertificateClaimed",
            "args": [
              {
                "name": "index",
                "type": "uint64"
              },
              {
                "name": "certificate",
                "type": "(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "clawbackCertificate",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "holdingAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "CertificateClawbacked",
            "args": [
              {
                "name": "index",
                "type": "uint64"
              },
              {
                "name": "certificate",
                "type": "(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)"
              }
            ],
            "desc": ""
          }
        ]
      }
    ],
    "events": [
      {
        "name": "NewCertificate",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "certificate",
            "type": "(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)"
          }
        ],
        "desc": ""
      },
      {
        "name": "ChangedCertificate",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "certificate",
            "type": "(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)"
          }
        ],
        "desc": ""
      },
      {
        "name": "CertificateClaimed",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "certificate",
            "type": "(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)"
          }
        ],
        "desc": ""
      },
      {
        "name": "CertificateClawbacked",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          },
          {
            "name": "certificate",
            "type": "(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)"
          }
        ],
        "desc": ""
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the CredentialsCombined smart contract.
 */
export type CredentialsCombined = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'uploadCertificate(string,string,string,string,string,string,string,string,string,bool,uint64,bool)uint64' | 'uploadCertificate', {
      argsObj: {
        url: string
        ipfs_hash: string
        studentEmail: string
        studentName: string
        instituteName: string
        eventName: string
        courseTitle: string
        courseStartDate: string
        courseEndDate: string
        hasClawback: boolean
        assetId: bigint | number
        isGDPRcompliant: boolean
      }
      argsTuple: [url: string, ipfs_hash: string, studentEmail: string, studentName: string, instituteName: string, eventName: string, courseTitle: string, courseStartDate: string, courseEndDate: string, hasClawback: boolean, assetId: bigint | number, isGDPRcompliant: boolean]
      returns: bigint
    }>
    & Record<'getCertificate(uint64)(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)' | 'getCertificate', {
      argsObj: {
        index: bigint | number
      }
      argsTuple: [index: bigint | number]
      returns: [string, string, bigint, boolean, boolean, string, string, string, string, string, string, string, string, string]
    }>
    & Record<'changeOwner(uint64,address)void' | 'changeOwner', {
      argsObj: {
        index: bigint | number
        newOwner: string
      }
      argsTuple: [index: bigint | number, newOwner: string]
      returns: void
    }>
    & Record<'changeMetadata(uint64,bool,string,string,string,string,string,string,string,string,string,bool)void' | 'changeMetadata', {
      argsObj: {
        index: bigint | number
        hasClawback: boolean
        url: string
        ipfs_hash: string
        studentEmail: string
        studentName: string
        instituteName: string
        eventName: string
        courseTitle: string
        courseStartDate: string
        courseEndDate: string
        isGDPRcompliant: boolean
      }
      argsTuple: [index: bigint | number, hasClawback: boolean, url: string, ipfs_hash: string, studentEmail: string, studentName: string, instituteName: string, eventName: string, courseTitle: string, courseStartDate: string, courseEndDate: string, isGDPRcompliant: boolean]
      returns: void
    }>
    & Record<'claimCertificate(uint64,pay)void' | 'claimCertificate', {
      argsObj: {
        index: bigint | number
        verifyTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [index: bigint | number, verifyTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'clawbackCertificate(uint64,address)void' | 'clawbackCertificate', {
      argsObj: {
        index: bigint | number
        holdingAddress: string
      }
      argsTuple: [index: bigint | number, holdingAddress: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'index'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CredentialsCombinedSig = keyof CredentialsCombined['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CredentialsCombinedSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CredentialsCombined smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CredentialsCombinedSig> = CredentialsCombined['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CredentialsCombined smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CredentialsCombinedSig> = CredentialsCombined['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CredentialsCombinedCreateCalls = (typeof CredentialsCombinedCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CredentialsCombinedCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CredentialsCombinedDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CredentialsCombinedCreateCalls) => CredentialsCombinedCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CredentialsCombinedCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CredentialsCombined smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the uploadCertificate(string,string,string,string,string,string,string,string,string,bool,uint64,bool)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static uploadCertificate(args: MethodArgs<'uploadCertificate(string,string,string,string,string,string,string,string,string,bool,uint64,bool)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'uploadCertificate(string,string,string,string,string,string,string,string,string,bool,uint64,bool)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.url, args.ipfs_hash, args.studentEmail, args.studentName, args.instituteName, args.eventName, args.courseTitle, args.courseStartDate, args.courseEndDate, args.hasClawback, args.assetId, args.isGDPRcompliant],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getCertificate(uint64)(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getCertificate(args: MethodArgs<'getCertificate(uint64)(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getCertificate(uint64)(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)' as const,
      methodArgs: Array.isArray(args) ? args : [args.index],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeOwner(uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeOwner(args: MethodArgs<'changeOwner(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'changeOwner(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.index, args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the changeMetadata(uint64,bool,string,string,string,string,string,string,string,string,string,bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static changeMetadata(args: MethodArgs<'changeMetadata(uint64,bool,string,string,string,string,string,string,string,string,string,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'changeMetadata(uint64,bool,string,string,string,string,string,string,string,string,string,bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.index, args.hasClawback, args.url, args.ipfs_hash, args.studentEmail, args.studentName, args.instituteName, args.eventName, args.courseTitle, args.courseStartDate, args.courseEndDate, args.isGDPRcompliant],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claimCertificate(uint64,pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimCertificate(args: MethodArgs<'claimCertificate(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claimCertificate(uint64,pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.index, args.verifyTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the clawbackCertificate(uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static clawbackCertificate(args: MethodArgs<'clawbackCertificate(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'clawbackCertificate(uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.index, args.holdingAddress],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CredentialsCombined smart contract
 */
export class CredentialsCombinedClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CredentialsCombinedClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CredentialsCombined['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CredentialsCombined smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CredentialsCombinedDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CredentialsCombinedCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CredentialsCombined smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(CredentialsCombinedCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CredentialsCombined smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the uploadCertificate(string,string,string,string,string,string,string,string,string,bool,uint64,bool)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public uploadCertificate(args: MethodArgs<'uploadCertificate(string,string,string,string,string,string,string,string,string,bool,uint64,bool)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CredentialsCombinedCallFactory.uploadCertificate(args, params))
  }

  /**
   * Calls the getCertificate(uint64)(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getCertificate(args: MethodArgs<'getCertificate(uint64)(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CredentialsCombinedCallFactory.getCertificate(args, params))
  }

  /**
   * Calls the changeOwner(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeOwner(args: MethodArgs<'changeOwner(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CredentialsCombinedCallFactory.changeOwner(args, params))
  }

  /**
   * Calls the changeMetadata(uint64,bool,string,string,string,string,string,string,string,string,string,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public changeMetadata(args: MethodArgs<'changeMetadata(uint64,bool,string,string,string,string,string,string,string,string,string,bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CredentialsCombinedCallFactory.changeMetadata(args, params))
  }

  /**
   * Calls the claimCertificate(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimCertificate(args: MethodArgs<'claimCertificate(uint64,pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CredentialsCombinedCallFactory.claimCertificate(args, params))
  }

  /**
   * Calls the clawbackCertificate(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public clawbackCertificate(args: MethodArgs<'clawbackCertificate(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CredentialsCombinedCallFactory.clawbackCertificate(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CredentialsCombined['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get index() {
        return CredentialsCombinedClient.getIntegerState(state, 'index')
      },
    }
  }

  public compose(): CredentialsCombinedComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      uploadCertificate(args: MethodArgs<'uploadCertificate(string,string,string,string,string,string,string,string,string,bool,uint64,bool)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.uploadCertificate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getCertificate(args: MethodArgs<'getCertificate(uint64)(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getCertificate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeOwner(args: MethodArgs<'changeOwner(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeOwner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      changeMetadata(args: MethodArgs<'changeMetadata(uint64,bool,string,string,string,string,string,string,string,string,string,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.changeMetadata(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimCertificate(args: MethodArgs<'claimCertificate(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimCertificate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clawbackCertificate(args: MethodArgs<'clawbackCertificate(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clawbackCertificate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CredentialsCombinedComposer
  }
}
export type CredentialsCombinedComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the uploadCertificate(string,string,string,string,string,string,string,string,string,bool,uint64,bool)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  uploadCertificate(args: MethodArgs<'uploadCertificate(string,string,string,string,string,string,string,string,string,bool,uint64,bool)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsCombinedComposer<[...TReturns, MethodReturn<'uploadCertificate(string,string,string,string,string,string,string,string,string,bool,uint64,bool)uint64'>]>

  /**
   * Calls the getCertificate(uint64)(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCertificate(args: MethodArgs<'getCertificate(uint64)(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsCombinedComposer<[...TReturns, MethodReturn<'getCertificate(uint64)(address,address,uint64,bool,bool,string,string,string,string,string,string,string,string,string)'>]>

  /**
   * Calls the changeOwner(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeOwner(args: MethodArgs<'changeOwner(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsCombinedComposer<[...TReturns, MethodReturn<'changeOwner(uint64,address)void'>]>

  /**
   * Calls the changeMetadata(uint64,bool,string,string,string,string,string,string,string,string,string,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeMetadata(args: MethodArgs<'changeMetadata(uint64,bool,string,string,string,string,string,string,string,string,string,bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsCombinedComposer<[...TReturns, MethodReturn<'changeMetadata(uint64,bool,string,string,string,string,string,string,string,string,string,bool)void'>]>

  /**
   * Calls the claimCertificate(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimCertificate(args: MethodArgs<'claimCertificate(uint64,pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsCombinedComposer<[...TReturns, MethodReturn<'claimCertificate(uint64,pay)void'>]>

  /**
   * Calls the clawbackCertificate(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clawbackCertificate(args: MethodArgs<'clawbackCertificate(uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsCombinedComposer<[...TReturns, MethodReturn<'clawbackCertificate(uint64,address)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the CredentialsCombined smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CredentialsCombinedComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CredentialsCombinedComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CredentialsCombinedComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CredentialsCombinedComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CredentialsCombinedComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CredentialsCombinedComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
