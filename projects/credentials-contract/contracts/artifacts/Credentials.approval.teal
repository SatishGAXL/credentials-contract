#pragma version 10

// This TEAL was generated by TEALScript v0.96.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts\Credentials.algo.ts:7
	// this.admin.value = this.app.creator
	byte 0x61 // "a"
	txna Applications 0
	app_params_get AppCreator
	pop
	app_global_put
	retsub

// changeAdmin(address)void
*abi_route_changeAdmin:
	// newAdmin: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (newAdmin) for changeAdmin must be a address
	assert

	// execute changeAdmin(address)void
	callsub changeAdmin
	int 1
	return

// changeAdmin(newAdmin: Address): void
changeAdmin:
	proto 1 0

	// contracts\Credentials.algo.ts:11
	// assert(this.txn.sender == this.admin.value)
	txn Sender
	byte 0x61 // "a"
	app_global_get
	==
	assert

	// contracts\Credentials.algo.ts:12
	// this.admin.value = newAdmin
	byte 0x61 // "a"
	frame_dig -1 // newAdmin: Address
	app_global_put
	retsub

// clawbackCertificate(uint64,address,uint64)void
*abi_route_clawbackCertificate:
	// amount: uint64
	txna ApplicationArgs 3
	btoi

	// holdingAddress: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 1 (holdingAddress) for clawbackCertificate must be a address
	assert

	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute clawbackCertificate(uint64,address,uint64)void
	callsub clawbackCertificate
	int 1
	return

// clawbackCertificate(assetId: AssetID, holdingAddress: Address, amount: uint64): void
clawbackCertificate:
	proto 3 0

	// contracts\Credentials.algo.ts:16
	// assert(assetId.clawback == this.app.address)
	frame_dig -1 // assetId: AssetID
	asset_params_get AssetClawback
	pop
	global CurrentApplicationAddress
	==
	assert

	// contracts\Credentials.algo.ts:17
	// sendAssetTransfer({
	//       xferAsset: assetId,
	//       assetSender: holdingAddress,
	//       assetAmount: amount,
	//       assetReceiver: assetId.reserve,
	//       fee: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\Credentials.algo.ts:18
	// xferAsset: assetId
	frame_dig -1 // assetId: AssetID
	itxn_field XferAsset

	// contracts\Credentials.algo.ts:19
	// assetSender: holdingAddress
	frame_dig -2 // holdingAddress: Address
	itxn_field AssetSender

	// contracts\Credentials.algo.ts:20
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// contracts\Credentials.algo.ts:21
	// assetReceiver: assetId.reserve
	frame_dig -1 // assetId: AssetID
	asset_params_get AssetReserve
	pop
	itxn_field AssetReceiver

	// contracts\Credentials.algo.ts:22
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "changeAdmin(address)void"
	method "clawbackCertificate(uint64,address,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_changeAdmin *abi_route_clawbackCertificate

	// this contract does not implement the given ABI method for call NoOp
	err