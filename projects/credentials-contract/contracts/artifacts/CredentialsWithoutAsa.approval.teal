#pragma version 10

// This TEAL was generated by TEALScript v0.103.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts\CredentialsWithoutAsa.algo.ts:25
	// this.index.value = 0
	byte 0x696e646578 // "index"
	int 0
	app_global_put
	retsub

// uploadCertificate(string,string,string,string,string,string,string,string,string)uint64
*abi_route_uploadCertificate:
	// The ABI return prefix
	byte 0x151f7c75

	// courseEndDate: string
	txna ApplicationArgs 9
	extract 2 0

	// courseStartDate: string
	txna ApplicationArgs 8
	extract 2 0

	// courseTitle: string
	txna ApplicationArgs 7
	extract 2 0

	// eventName: string
	txna ApplicationArgs 6
	extract 2 0

	// instituteName: string
	txna ApplicationArgs 5
	extract 2 0

	// studentName: string
	txna ApplicationArgs 4
	extract 2 0

	// studentEmail: string
	txna ApplicationArgs 3
	extract 2 0

	// ipfs_hash: string
	txna ApplicationArgs 2
	extract 2 0

	// url: string
	txna ApplicationArgs 1
	extract 2 0

	// execute uploadCertificate(string,string,string,string,string,string,string,string,string)uint64
	callsub uploadCertificate
	itob
	concat
	log
	int 1
	return

// uploadCertificate(url: string, ipfs_hash: string, studentEmail: string, studentName: string, instituteName: string, eventName: string, courseTitle: string, courseStartDate: string, courseEndDate: string): uint64
uploadCertificate:
	proto 9 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts\CredentialsWithoutAsa.algo.ts:39
	// issuedAddress = this.txn.sender
	txn Sender
	frame_bury 0 // issuedAddress: address

	// contracts\CredentialsWithoutAsa.algo.ts:40
	// certificate: CertificateMetadata = {
	//       url: url,
	//       ipfs_hash: ipfs_hash,
	//       studentEmail: studentEmail,
	//       studentName: studentName,
	//       instituteName: instituteName,
	//       eventName: eventName,
	//       issuedAddress: issuedAddress,
	//       owner: issuedAddress,
	//       courseTitle: courseTitle,
	//       courseStartDate: courseStartDate,
	//       courseEndDate: courseEndDate,
	//     }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0052 // initial head offset
	frame_dig 0 // issuedAddress: address
	callsub *process_static_tuple_element
	frame_dig 0 // issuedAddress: address
	callsub *process_static_tuple_element
	frame_dig -1 // url: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -2 // ipfs_hash: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // studentEmail: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -4 // studentName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -5 // instituteName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -6 // eventName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -7 // courseTitle: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -8 // courseStartDate: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -9 // courseEndDate: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // certificate: CertificateMetadata

	// contracts\CredentialsWithoutAsa.algo.ts:53
	// this.certificates(this.index.value).value = certificate
	byte 0x696e646578 // "index"
	app_global_get
	itob
	dup
	box_del
	pop
	frame_dig 1 // certificate: CertificateMetadata
	box_put

	// contracts\CredentialsWithoutAsa.algo.ts:54
	// this.index.value = this.index.value + 1
	byte 0x696e646578 // "index"
	dup
	app_global_get
	int 1
	+
	app_global_put

	// contracts\CredentialsWithoutAsa.algo.ts:55
	// this.NewCertificate.log({ index: this.index.value - 1, certificate: certificate })
	byte 0x1081f9d5 // NewCertificate(uint64,(address,address,string,string,string,string,string,string,string,string,string))
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x000a // initial head offset
	byte 0x696e646578 // "index"
	app_global_get
	int 1
	-
	itob
	callsub *process_static_tuple_element
	frame_dig 1 // certificate: CertificateMetadata
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	log

	// contracts\CredentialsWithoutAsa.algo.ts:56
	// return this.index.value - 1;
	byte 0x696e646578 // "index"
	app_global_get
	int 1
	-

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string)
*abi_route_getCertificate:
	// The ABI return prefix
	byte 0x151f7c75

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string)
	callsub getCertificate
	concat
	log
	int 1
	return

// getCertificate(index: uint64): CertificateMetadata
getCertificate:
	proto 1 1

	// contracts\CredentialsWithoutAsa.algo.ts:60
	// assert(this.certificates(index).exists, 'Invalid Index')
	frame_dig -1 // index: uint64
	itob
	box_len
	swap
	pop

	// Invalid Index
	assert

	// contracts\CredentialsWithoutAsa.algo.ts:61
	// return this.certificates(index).value;
	frame_dig -1 // index: uint64
	itob
	box_get

	// box value does not exist: this.certificates(index).value
	assert
	retsub

// changeOwner(uint64,address)void
*abi_route_changeOwner:
	// newOwner: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (newOwner) for changeOwner must be a address
	assert

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeOwner(uint64,address)void
	callsub changeOwner
	int 1
	return

// changeOwner(index: uint64, newOwner: Address): void
changeOwner:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\CredentialsWithoutAsa.algo.ts:65
	// assert(this.certificates(index).exists, 'Invalid Index')
	frame_dig -1 // index: uint64
	itob
	box_len
	swap
	pop

	// Invalid Index
	assert

	// contracts\CredentialsWithoutAsa.algo.ts:66
	// issuedAddress = this.certificates(index).value.issuedAddress
	frame_dig -1 // index: uint64
	itob
	box_get

	// box value does not exist: this.certificates(index).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 32
	frame_bury 0 // issuedAddress: address

	// contracts\CredentialsWithoutAsa.algo.ts:67
	// assert(issuedAddress == this.txn.sender, 'Only issuedAddress Can Update this field')
	frame_dig 0 // issuedAddress: address
	txn Sender
	==

	// Only issuedAddress Can Update this field
	assert

	// contracts\CredentialsWithoutAsa.algo.ts:68
	// this.certificates(index).replace(32, rawBytes(newOwner))
	frame_dig -1 // index: uint64
	itob
	int 32
	frame_dig -2 // newOwner: Address
	box_replace

	// contracts\CredentialsWithoutAsa.algo.ts:69
	// this.ChangedCertificate.log({ index: index, certificate: this.certificates(index).value })
	byte 0x4d22746b // ChangedCertificate(uint64,(address,address,string,string,string,string,string,string,string,string,string))
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x000a // initial head offset
	frame_dig -1 // index: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig -1 // index: uint64
	itob
	box_get

	// box value does not exist: this.certificates(index).value
	assert
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	log
	retsub

// changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void
*abi_route_changeMetadata:
	// courseEndDate: string
	txna ApplicationArgs 10
	extract 2 0

	// courseStartDate: string
	txna ApplicationArgs 9
	extract 2 0

	// courseTitle: string
	txna ApplicationArgs 8
	extract 2 0

	// eventName: string
	txna ApplicationArgs 7
	extract 2 0

	// instituteName: string
	txna ApplicationArgs 6
	extract 2 0

	// studentName: string
	txna ApplicationArgs 5
	extract 2 0

	// studentEmail: string
	txna ApplicationArgs 4
	extract 2 0

	// ipfs_hash: string
	txna ApplicationArgs 3
	extract 2 0

	// url: string
	txna ApplicationArgs 2
	extract 2 0

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void
	callsub changeMetadata
	int 1
	return

// changeMetadata(index: uint64, url: string, ipfs_hash: string, studentEmail: string, studentName: string, instituteName: string, eventName: string, courseTitle: string, courseStartDate: string, courseEndDate: string): void
changeMetadata:
	proto 10 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts\CredentialsWithoutAsa.algo.ts:84
	// assert(this.certificates(index).exists, 'Invalid Index')
	frame_dig -1 // index: uint64
	itob
	box_len
	swap
	pop

	// Invalid Index
	assert

	// contracts\CredentialsWithoutAsa.algo.ts:85
	// issuedAddress = this.certificates(index).value.issuedAddress
	frame_dig -1 // index: uint64
	itob
	box_get

	// box value does not exist: this.certificates(index).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 32
	frame_bury 0 // issuedAddress: address

	// contracts\CredentialsWithoutAsa.algo.ts:86
	// assert(issuedAddress == this.txn.sender, 'Only issuedAddress Can Update this field')
	frame_dig 0 // issuedAddress: address
	txn Sender
	==

	// Only issuedAddress Can Update this field
	assert

	// contracts\CredentialsWithoutAsa.algo.ts:98
	// oldMetadata = this.certificates(index).value
	frame_dig -1 // index: uint64
	itob
	frame_bury 1 // storage key//oldMetadata

	// contracts\CredentialsWithoutAsa.algo.ts:99
	// newMetadata: CertificateMetadata = {
	//       url: url,
	//       ipfs_hash: ipfs_hash,
	//       studentEmail: studentEmail,
	//       studentName: studentName,
	//       instituteName: instituteName,
	//       eventName: eventName,
	//       issuedAddress: oldMetadata.issuedAddress,
	//       owner: oldMetadata.owner,
	//       courseTitle: courseTitle,
	//       courseStartDate: courseStartDate,
	//       courseEndDate: courseEndDate,
	//     }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0052 // initial head offset
	frame_dig 1 // storage key//oldMetadata
	box_get

	// box value does not exist: this.certificates(index).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 32
	callsub *process_static_tuple_element
	frame_dig 1 // storage key//oldMetadata
	box_get

	// box value does not exist: this.certificates(index).value
	assert
	store 255 // full array
	load 255 // full array
	extract 32 32
	callsub *process_static_tuple_element
	frame_dig -2 // url: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // ipfs_hash: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -4 // studentEmail: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -5 // studentName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -6 // instituteName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -7 // eventName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -8 // courseTitle: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -9 // courseStartDate: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -10 // courseEndDate: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 2 // newMetadata: CertificateMetadata

	// contracts\CredentialsWithoutAsa.algo.ts:112
	// this.certificates(index).value = newMetadata
	frame_dig -1 // index: uint64
	itob
	dup
	box_del
	pop
	frame_dig 2 // newMetadata: CertificateMetadata
	box_put
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "uploadCertificate(string,string,string,string,string,string,string,string,string)uint64"
	method "getCertificate(uint64)(address,address,string,string,string,string,string,string,string,string,string)"
	method "changeOwner(uint64,address)void"
	method "changeMetadata(uint64,string,string,string,string,string,string,string,string,string)void"
	txna ApplicationArgs 0
	match *abi_route_uploadCertificate *abi_route_getCertificate *abi_route_changeOwner *abi_route_changeMetadata

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub