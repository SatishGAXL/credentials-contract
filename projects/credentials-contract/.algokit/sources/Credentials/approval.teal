#pragma version 10

// This TEAL was generated by TEALScript v0.96.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// claimCertificate(uint64,pay)void
*abi_route_claimCertificate:
	// verifyTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (verifyTxn) for claimCertificate must be a pay transaction
	assert

	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute claimCertificate(uint64,pay)void
	callsub claimCertificate
	int 1
	return

// claimCertificate(assetId: AssetID, verifyTxn: PayTxn): void
claimCertificate:
	proto 2 0

	// contracts\Credentials.algo.ts:5
	// verifyPayTxn(verifyTxn, {
	//       sender: assetId.freeze,
	//       receiver: assetId.freeze,
	//       amount: 0,
	//     })
	// verify sender
	frame_dig -2 // verifyTxn: PayTxn
	gtxns Sender
	frame_dig -1 // assetId: AssetID
	asset_params_get AssetFreeze
	pop
	==

	// transaction verification failed: {"txn":"verifyTxn","field":"sender","expected":"assetId.freeze"}
	assert

	// verify receiver
	frame_dig -2 // verifyTxn: PayTxn
	gtxns Receiver
	frame_dig -1 // assetId: AssetID
	asset_params_get AssetFreeze
	pop
	==

	// transaction verification failed: {"txn":"verifyTxn","field":"receiver","expected":"assetId.freeze"}
	assert

	// verify amount
	frame_dig -2 // verifyTxn: PayTxn
	gtxns Amount
	int 0
	==

	// transaction verification failed: {"txn":"verifyTxn","field":"amount","expected":"0"}
	assert

	// contracts\Credentials.algo.ts:10
	// assert(assetId.clawback == this.app.address, 'Clawback Not Set to Contract')
	frame_dig -1 // assetId: AssetID
	asset_params_get AssetClawback
	pop
	global CurrentApplicationAddress
	==

	// Clawback Not Set to Contract
	assert

	// contracts\Credentials.algo.ts:11
	// assert(assetId.manager.assetBalance(assetId) > 0, 'Already Claimed')
	frame_dig -1 // assetId: AssetID
	asset_params_get AssetManager
	pop
	frame_dig -1 // assetId: AssetID
	asset_holding_get AssetBalance
	pop
	int 0
	>

	// Already Claimed
	assert

	// contracts\Credentials.algo.ts:12
	// assert(this.txn.sender.isOptedInToAsset(assetId), 'Receiver Not Opted to Asset')
	txn Sender
	frame_dig -1 // assetId: AssetID
	asset_holding_get AssetBalance
	swap
	pop

	// Receiver Not Opted to Asset
	assert

	// contracts\Credentials.algo.ts:13
	// sendAssetTransfer({
	//       xferAsset: assetId,
	//       assetAmount: 1,
	//       assetSender: assetId.manager,
	//       assetReceiver: this.txn.sender,
	//       fee: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\Credentials.algo.ts:14
	// xferAsset: assetId
	frame_dig -1 // assetId: AssetID
	itxn_field XferAsset

	// contracts\Credentials.algo.ts:15
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// contracts\Credentials.algo.ts:16
	// assetSender: assetId.manager
	frame_dig -1 // assetId: AssetID
	asset_params_get AssetManager
	pop
	itxn_field AssetSender

	// contracts\Credentials.algo.ts:17
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts\Credentials.algo.ts:18
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// clawbackCertificate(uint64,address)void
*abi_route_clawbackCertificate:
	// holdingAddress: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (holdingAddress) for clawbackCertificate must be a address
	assert

	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute clawbackCertificate(uint64,address)void
	callsub clawbackCertificate
	int 1
	return

// clawbackCertificate(assetId: AssetID, holdingAddress: Address): void
clawbackCertificate:
	proto 2 0

	// contracts\Credentials.algo.ts:23
	// assert(assetId.clawback == this.app.address, 'Clawback Not Set to Contract')
	frame_dig -1 // assetId: AssetID
	asset_params_get AssetClawback
	pop
	global CurrentApplicationAddress
	==

	// Clawback Not Set to Contract
	assert

	// contracts\Credentials.algo.ts:24
	// assert(assetId.manager == this.txn.sender, 'Only Manager can Clawback')
	frame_dig -1 // assetId: AssetID
	asset_params_get AssetManager
	pop
	txn Sender
	==

	// Only Manager can Clawback
	assert

	// contracts\Credentials.algo.ts:25
	// assert(holdingAddress.assetBalance(assetId) > 0, 'Holding Address does not hold certificate')
	frame_dig -2 // holdingAddress: Address
	frame_dig -1 // assetId: AssetID
	asset_holding_get AssetBalance
	pop
	int 0
	>

	// Holding Address does not hold certificate
	assert

	// contracts\Credentials.algo.ts:26
	// assert(this.txn.sender.isOptedInToAsset(assetId), 'Receiver Not Opted to Asset')
	txn Sender
	frame_dig -1 // assetId: AssetID
	asset_holding_get AssetBalance
	swap
	pop

	// Receiver Not Opted to Asset
	assert

	// contracts\Credentials.algo.ts:27
	// sendAssetTransfer({
	//       xferAsset: assetId,
	//       assetSender: holdingAddress,
	//       assetAmount: 1,
	//       assetReceiver: this.txn.sender,
	//       fee: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts\Credentials.algo.ts:28
	// xferAsset: assetId
	frame_dig -1 // assetId: AssetID
	itxn_field XferAsset

	// contracts\Credentials.algo.ts:29
	// assetSender: holdingAddress
	frame_dig -2 // holdingAddress: Address
	itxn_field AssetSender

	// contracts\Credentials.algo.ts:30
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// contracts\Credentials.algo.ts:31
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts\Credentials.algo.ts:32
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "claimCertificate(uint64,pay)void"
	method "clawbackCertificate(uint64,address)void"
	txna ApplicationArgs 0
	match *abi_route_claimCertificate *abi_route_clawbackCertificate

	// this contract does not implement the given ABI method for call NoOp
	err